// @ts-check

import eslint from "@eslint/js";
import tseslint from "typescript-eslint";

export default tseslint.config(
    eslint.configs.recommended,
    tseslint.configs.strictTypeChecked,
    tseslint.configs.stylisticTypeChecked,
    { ignores: ["eslint.config.mjs", "dist/"] },
    { languageOptions: { parserOptions: { projectService: true, tsconfigRootDir: import.meta.dirname } } },
    {
        rules: {
            curly: "error",
            radix: "error",
            eqeqeq: "error",
            "no-var": "error",
            "no-new": "error",
            "no-void": "error",
            "no-eval": "error",
            "no-alert": "error",
            "no-proto": "error",
            complexity: "error",
            "no-shadow": "error",
            "sort-vars": "error",
            "max-depth": "error",
            "max-lines": "error",
            "no-caller": "error",
            "no-labels": "error",
            "func-names": "error",
            "no-bitwise": "error",
            "no-eq-null": "error",
            "func-style": ["error", "declaration"],
            "no-plusplus": "error",
            "no-new-func": "error",
            "no-continue": "error",
            "no-iterator": "error",
            "prefer-const": "error",
            "no-multi-str": "error",
            "no-sequences": "error",
            "no-loop-func": "error",
            "no-label-var": "error",
            "no-div-regex": "error",
            "no-extra-bind": "error",
            "no-script-url": "error",
            "require-await": "error",
            "prefer-spread": "error",
            "max-statements": "error",
            "no-extra-label": "error",
            "no-lone-blocks": "error",
            "no-else-return": "error",
            "no-new-wrappers": "error",
            "no-octal-escape": "error",
            "no-multi-assign": "error",
            "no-invalid-this": "error",
            "no-implied-eval": "error",
            "consistent-this": "error",
            "no-self-compare": "error",
            "prefer-template": "error",
            "no-useless-call": "error",
            "no-await-in-loop": "error",
            "block-scoped-var": "error",
            "no-throw-literal": "error",
            "object-shorthand": "error",
            "no-return-assign": "error",
            "no-magic-numbers": "error",
            "no-useless-concat": "error",
            "no-useless-rename": "error",
            "no-useless-return": "error",
            "consistent-return": "error",
            "default-case-last": "error",
            "no-nested-ternary": "error",
            "no-param-reassign": "error",
            "no-inline-comments": "error",
            "default-param-last": "error",
            "prefer-rest-params": "error",
            "symbol-description": "error",
            "func-name-matching": "error",
            "operator-assignment": "error",
            "no-unreachable-loop": "error",
            "no-implicit-globals": "error",
            "no-unneeded-ternary": "error",
            "no-negated-condition": "error",
            "capitalized-comments": "error",
            "max-classes-per-file": "error",
            "max-nested-callbacks": "error",
            "no-array-constructor": "error",
            "prefer-object-spread": "error",
            "no-use-before-define": "error",
            "no-duplicate-imports": "error",
            "prefer-destructuring": "error",
            "no-implicit-coercion": "error",
            "no-underscore-dangle": "error",
            "no-restricted-syntax": [
                "error",
                {
                    message: "Usage of `null` is not allowed. Use `undefined` instead.",
                    selector: "Literal[value=null]",
                },
            ],
            "no-unused-expressions": "error",
            "prefer-arrow-callback": "error",
            "no-restricted-exports": "error",
            "no-constructor-return": "error",
            "prefer-regex-literals": "error",
            "no-useless-assignment": "error",
            "no-inner-declarations": "error",
            "array-callback-return": "error",
            "require-atomic-updates": "error",
            "require-unicode-regexp": "error",
            "grouped-accessor-pairs": "error",
            "max-lines-per-function": "error",
            "no-useless-computed-key": "error",
            "prefer-numeric-literals": "error",
            "prefer-named-capture-group": "error",
            "no-promise-executor-return": "error",
            "no-template-curly-in-string": "error",
            "logical-assignment-operators": "error",
            "prefer-promise-reject-errors": "error",
            "no-unmodified-loop-condition": "error",
            "prefer-exponentiation-operator": "error",

            "@typescript-eslint/typedef": [
                "error",
                {
                    parameter: true,
                    arrayDestructuring: true,
                    objectDestructuring: true,
                    propertyDeclaration: true,
                    variableDeclaration: true,
                    memberVariableDeclaration: true,
                },
            ],
            "@typescript-eslint/array-type": ["error", { default: "array" }],
            "@typescript-eslint/member-ordering": "error",
            "@typescript-eslint/prefer-readonly": "error",
            "@typescript-eslint/naming-convention": [
                "error",
                { selector: "class", format: ["PascalCase"] },
                { selector: "variable", format: ["camelCase"] },
                {
                    selector: "variable",
                    format: ["camelCase", "UPPER_CASE"],
                    modifiers: ["const"],
                },
                { selector: "interface", format: ["PascalCase"] },
                { selector: "typeAlias", format: ["PascalCase"] },
                { selector: "enumMember", format: ["UPPER_CASE"] },
            ],
            "@typescript-eslint/no-inferrable-types": "off",
            "@typescript-eslint/no-extraneous-class": "off",
            "@typescript-eslint/no-restricted-types": [
                "error",
                {
                    types: {
                        null: "Usage of `null` is not allowed. Use `undefined` instead.",
                    },
                },
            ],
            "@typescript-eslint/method-signature-style": ["error", "method"],
            "@typescript-eslint/no-useless-empty-export": "error",
            "@typescript-eslint/no-unsafe-type-assertion": "error",
            "@typescript-eslint/no-unnecessary-qualifier": "error",
            "@typescript-eslint/prefer-enum-initializers": "error",
            "@typescript-eslint/require-array-sort-compare": "error",
            "@typescript-eslint/strict-boolean-expressions": ["error", { allowNumber: false, allowString: false }],
            "@typescript-eslint/switch-exhaustiveness-check": "error",
            "@typescript-eslint/explicit-function-return-type": "error",
            "@typescript-eslint/explicit-member-accessibility": "error",
            "@typescript-eslint/no-unnecessary-parameter-property-assignment": "error",
        },
    },
);
